{"version":3,"file":"rogue-engine-user-scripts.js","mappings":"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","sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/./Assets/Components/Lightsaber.re.ts","webpack://[name]/./Assets/Components/LightsaberBlade.re.ts","webpack://[name]/./Assets/Components/VirtualRealityCamera.re.ts","webpack://[name]/./Assets/Components/VirtualRealityController.re.ts","webpack://[name]/external umd {\"commonjs\":\"rogue-engine\",\"commonjs2\":\"rogue-engine\",\"amd\":\"rogue-engine\",\"root\":\"rogue-engine\"}","webpack://[name]/./node_modules/three/examples/jsm/webxr/VRButton.js","webpack://[name]/webpack/bootstrap","webpack://[name]/webpack/runtime/chunk loaded","webpack://[name]/webpack/runtime/compat get default export","webpack://[name]/webpack/runtime/define property getters","webpack://[name]/webpack/runtime/hasOwnProperty shorthand","webpack://[name]/webpack/runtime/make namespace object","webpack://[name]/webpack/runtime/jsonp chunk loading","webpack://[name]/webpack/before-startup","webpack://[name]/webpack/startup","webpack://[name]/webpack/after-startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"rogue-engine\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"rogue-engine\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"rogue-engine-user-scripts\"] = factory(require(\"rogue-engine\"));\n\telse\n\t\troot[\"rogue-engine-user-scripts\"] = factory(root[\"rogue-engine\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE_rogue_engine__) {\nreturn ","import * as RE from 'rogue-engine';\nimport { getComponent, Prop } from 'rogue-engine';\nimport LightsaberBlade from './LightsaberBlade.re';\nimport VirtualRealityController from './VirtualRealityController.re';\nimport { Object3D } from 'three';\n\nexport default class Lightsaber extends RE.Component {\n  @Prop(\"Object3D\")\n  blade: Object3D;\n\n  start() {\n    const vrController = getComponent(VirtualRealityController, this.object3d)\n    vrController?.addEventListener(\"selectstart\", this.onSelectStart);\n  }\n\n  onSelectStart() {\n    getComponent(LightsaberBlade, this.blade)?.toggle();\n  }\n}\n\nRE.registerComponent(Lightsaber);\n","import * as RE from 'rogue-engine';\nimport { Prop } from 'rogue-engine';\nimport { Object3D } from 'three';\n\nexport default class LightsaberBlade extends RE.Component {\n  active: boolean = true;\n\n  toggle() {\n    this.active = !this.active;\n\n    this.object3d.visible = this.active;\n  }\n}\n\nRE.registerComponent(LightsaberBlade);\n","import * as RE from 'rogue-engine';\nimport { VRButton } from 'three/examples/jsm/webxr/VRButton.js';\nimport { Runtime } from 'rogue-engine';\n\nexport default class VirtualRealityCamera extends RE.Component {\n  start() {\n    const { camera, renderer, scene } = Runtime;\n\n    renderer.xr.enabled = true;\n    document.body.appendChild( VRButton.createButton( renderer ) );\n\n    // renderer.setAnimationLoop( function () {\n    //   renderer.render( scene, camera );\n    // } );\n  }\n}\n\nRE.registerComponent(VirtualRealityCamera);\n","import * as RE from 'rogue-engine';\nimport { Prop, Runtime } from 'rogue-engine';\nimport { Group } from 'three/src/objects/Group';\n\nexport default class VirtualRealityController extends RE.Component {\n  @Prop(\"Number\")\n  controllerId: number;\n\n  private controller: Group;\n  private grip: Group;\n\n  start() {\n    const { renderer } = Runtime;\n    this.controller = renderer.xr.getController(this.controllerId);\n    this.grip = renderer.xr.getControllerGrip(this.controllerId);\n  }\n\n  update() {\n    const { position, rotation } = this.grip;\n    this.object3d.position.copy(position);\n    this.object3d.rotation.copy(rotation);\n  }\n\n  addEventListener(event, func) {\n    this.controller.addEventListener(event, func);\n  }\n}\n\nRE.registerComponent(VirtualRealityController);\n","module.exports = __WEBPACK_EXTERNAL_MODULE_rogue_engine__;","class VRButton {\n\n\tstatic createButton( renderer, options ) {\n\n\t\tif ( options ) {\n\n\t\t\tconsole.error( 'THREE.VRButton: The \"options\" parameter has been removed. Please set the reference space type via renderer.xr.setReferenceSpaceType() instead.' );\n\n\t\t}\n\n\t\tconst button = document.createElement( 'button' );\n\n\t\tfunction showEnterVR( /*device*/ ) {\n\n\t\t\tlet currentSession = null;\n\n\t\t\tasync function onSessionStarted( session ) {\n\n\t\t\t\tsession.addEventListener( 'end', onSessionEnded );\n\n\t\t\t\tawait renderer.xr.setSession( session );\n\t\t\t\tbutton.textContent = 'EXIT VR';\n\n\t\t\t\tcurrentSession = session;\n\n\t\t\t}\n\n\t\t\tfunction onSessionEnded( /*event*/ ) {\n\n\t\t\t\tcurrentSession.removeEventListener( 'end', onSessionEnded );\n\n\t\t\t\tbutton.textContent = 'ENTER VR';\n\n\t\t\t\tcurrentSession = null;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tbutton.style.display = '';\n\n\t\t\tbutton.style.cursor = 'pointer';\n\t\t\tbutton.style.left = 'calc(50% - 50px)';\n\t\t\tbutton.style.width = '100px';\n\n\t\t\tbutton.textContent = 'ENTER VR';\n\n\t\t\tbutton.onmouseenter = function () {\n\n\t\t\t\tbutton.style.opacity = '1.0';\n\n\t\t\t};\n\n\t\t\tbutton.onmouseleave = function () {\n\n\t\t\t\tbutton.style.opacity = '0.5';\n\n\t\t\t};\n\n\t\t\tbutton.onclick = function () {\n\n\t\t\t\tif ( currentSession === null ) {\n\n\t\t\t\t\t// WebXR's requestReferenceSpace only works if the corresponding feature\n\t\t\t\t\t// was requested at session creation time. For simplicity, just ask for\n\t\t\t\t\t// the interesting ones as optional features, but be aware that the\n\t\t\t\t\t// requestReferenceSpace call will fail if it turns out to be unavailable.\n\t\t\t\t\t// ('local' is always available for immersive sessions and doesn't need to\n\t\t\t\t\t// be requested separately.)\n\n\t\t\t\t\tconst sessionInit = { optionalFeatures: [ 'local-floor', 'bounded-floor', 'hand-tracking', 'layers' ] };\n\t\t\t\t\tnavigator.xr.requestSession( 'immersive-vr', sessionInit ).then( onSessionStarted );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcurrentSession.end();\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction disableButton() {\n\n\t\t\tbutton.style.display = '';\n\n\t\t\tbutton.style.cursor = 'auto';\n\t\t\tbutton.style.left = 'calc(50% - 75px)';\n\t\t\tbutton.style.width = '150px';\n\n\t\t\tbutton.onmouseenter = null;\n\t\t\tbutton.onmouseleave = null;\n\n\t\t\tbutton.onclick = null;\n\n\t\t}\n\n\t\tfunction showWebXRNotFound() {\n\n\t\t\tdisableButton();\n\n\t\t\tbutton.textContent = 'VR NOT SUPPORTED';\n\n\t\t}\n\n\t\tfunction stylizeElement( element ) {\n\n\t\t\telement.style.position = 'absolute';\n\t\t\telement.style.bottom = '20px';\n\t\t\telement.style.padding = '12px 6px';\n\t\t\telement.style.border = '1px solid #fff';\n\t\t\telement.style.borderRadius = '4px';\n\t\t\telement.style.background = 'rgba(0,0,0,0.1)';\n\t\t\telement.style.color = '#fff';\n\t\t\telement.style.font = 'normal 13px sans-serif';\n\t\t\telement.style.textAlign = 'center';\n\t\t\telement.style.opacity = '0.5';\n\t\t\telement.style.outline = 'none';\n\t\t\telement.style.zIndex = '999';\n\n\t\t}\n\n\t\tif ( 'xr' in navigator ) {\n\n\t\t\tbutton.id = 'VRButton';\n\t\t\tbutton.style.display = 'none';\n\n\t\t\tstylizeElement( button );\n\n\t\t\tnavigator.xr.isSessionSupported( 'immersive-vr' ).then( function ( supported ) {\n\n\t\t\t\tsupported ? showEnterVR() : showWebXRNotFound();\n\n\t\t\t} );\n\n\t\t\treturn button;\n\n\t\t} else {\n\n\t\t\tconst message = document.createElement( 'a' );\n\n\t\t\tif ( window.isSecureContext === false ) {\n\n\t\t\t\tmessage.href = document.location.href.replace( /^http:/, 'https:' );\n\t\t\t\tmessage.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n\t\t\t} else {\n\n\t\t\t\tmessage.href = 'https://immersiveweb.dev/';\n\t\t\t\tmessage.innerHTML = 'WEBXR NOT AVAILABLE';\n\n\t\t\t}\n\n\t\t\tmessage.style.left = 'calc(50% - 90px)';\n\t\t\tmessage.style.width = '180px';\n\t\t\tmessage.style.textDecoration = 'none';\n\n\t\t\tstylizeElement( message );\n\n\t\t\treturn message;\n\n\t\t}\n\n\t}\n\n}\n\nexport { VRButton };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"rogue-engine-user-scripts\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_name_\"] = self[\"webpackChunk_name_\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n__webpack_require__(\"./Assets/Components/Lightsaber.re.ts\");\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(\"./Assets/Components/LightsaberBlade.re.ts\");\n__webpack_require__(\"./Assets/Components/VirtualRealityCamera.re.ts\");\nvar __webpack_exports__ = __webpack_require__(\"./Assets/Components/VirtualRealityController.re.ts\");\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":[],"sourceRoot":""}